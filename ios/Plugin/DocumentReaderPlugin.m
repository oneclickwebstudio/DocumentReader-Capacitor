#import <Foundation/Foundation.h>
#import <Capacitor/Capacitor.h>

// Define the plugin using the CAP_PLUGIN Macro, and
// each method the plugin supports using the CAP_PLUGIN_METHOD macro.
CAP_PLUGIN(DocumentReaderPlugin, "DocumentReader",
           CAP_PLUGIN_METHOD(echo, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(initializeReaderAutomatically, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getAPIVersion, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getAvailableScenarios, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(isRFIDAvailableForUse, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getCoreMode, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getCoreVersion, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getDatabaseDate, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getDatabaseID, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getDatabaseVersion, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getDocumentReaderIsReady, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getDocumentReaderStatus, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getDatabaseCountriesNumber, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getDatabaseDocumentsNumber, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(selectedScenario, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getSessionLogFolder, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getDatabaseDescription, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(showScanner, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(startNewPage, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(startNewSession, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(startRFIDReader, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(stopRFIDReader, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(stopRFIDReaderWithErrorMessage, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(stopScanner, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(deinitializeReader, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(isAuthenticatorAvailableForUse, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getConfig, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getRfidScenario, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getLicenseExpiryDate, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getLicenseCountryFilter, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(licenseIsRfidAvailable, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getCameraSessionIsPaused, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(removeDatabase, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(cancelDBUpdate, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(resetConfiguration, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(clearPKDCertificates, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(readRFID, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getRfidSessionStatus, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(setRfidDelegate, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(setEnableCoreLogs, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(addPKDCertificates, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(setCameraSessionIsPaused, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(getScenario, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(recognizeImages, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(showScannerWithCameraID, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(runAutoUpdate, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(setConfig, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(setRfidScenario, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(initializeReader, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(prepareDatabase, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(recognizeImage, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(recognizeData, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(setRfidSessionStatus, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(providePACertificates, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(provideTACertificates, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(provideTASignature, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(parseCoreResults, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(setTCCParams, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(recognizeImageWithOpts, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(recognizeVideoFrame, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(showScannerWithCameraIDAndOpts, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(recognizeImageWithCameraMode, CAPPluginReturnPromise);
           CAP_PLUGIN_METHOD(recognizeImagesWithImageInputs, CAPPluginReturnPromise);
)
